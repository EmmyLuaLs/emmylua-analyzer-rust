{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "title": "Emmyrc",
  "type": "object",
  "properties": {
    "$schema": {
      "type": [
        "string",
        "null"
      ]
    },
    "codeAction": {
      "description": "Configuration for code actions and quick fixes.",
      "$ref": "#/$defs/EmmyrcCodeAction",
      "default": {
        "insertSpace": false
      }
    },
    "codeLens": {
      "description": "Configuration for code lens features.",
      "$ref": "#/$defs/EmmyrcCodeLens",
      "default": {
        "enable": true
      }
    },
    "completion": {
      "description": "Configuration for code completion features.",
      "$ref": "#/$defs/EmmyrcCompletion",
      "default": {
        "autoRequire": true,
        "autoRequireFunction": "require",
        "autoRequireNamingConvention": "keep",
        "autoRequireSeparator": ".",
        "baseFunctionIncludesName": true,
        "callSnippet": false,
        "enable": true,
        "postfix": "@"
      }
    },
    "diagnostics": {
      "description": "Configuration for diagnostics and error detection.",
      "$ref": "#/$defs/EmmyrcDiagnostic",
      "default": {
        "diagnosticInterval": 500,
        "disable": [],
        "enable": true,
        "enables": [],
        "globals": [],
        "globalsRegex": [],
        "severity": {}
      }
    },
    "doc": {
      "description": "Configuration for documentation parsing.",
      "$ref": "#/$defs/EmmyrcDoc",
      "default": {
        "knownTags": [],
        "privateName": [],
        "syntax": "md"
      }
    },
    "documentColor": {
      "description": "Configuration for document color features.",
      "$ref": "#/$defs/EmmyrcDocumentColor",
      "default": {
        "enable": true
      }
    },
    "format": {
      "description": "Configuration for code formatting.",
      "$ref": "#/$defs/EmmyrcReformat",
      "default": {
        "externalTool": null,
        "useDiff": false
      }
    },
    "hint": {
      "description": "Configuration for inlay hints in the editor.",
      "$ref": "#/$defs/EmmyrcInlayHint",
      "default": {
        "enable": true,
        "enumParamHint": false,
        "indexHint": true,
        "localHint": true,
        "metaCallHint": true,
        "overrideHint": true,
        "paramHint": true
      }
    },
    "hover": {
      "description": "Configuration for hover information.",
      "$ref": "#/$defs/EmmyrcHover",
      "default": {
        "enable": true
      }
    },
    "inlineValues": {
      "description": "Configuration for inline value display.",
      "$ref": "#/$defs/EmmyrcInlineValues",
      "default": {
        "enable": true
      }
    },
    "references": {
      "description": "Configuration for reference lookup features.",
      "$ref": "#/$defs/EmmyrcReference",
      "default": {
        "enable": true,
        "fuzzySearch": true,
        "shortStringSearch": false
      }
    },
    "resource": {
      "description": "Configuration for resource file management.",
      "$ref": "#/$defs/EmmyrcResource",
      "default": {
        "paths": []
      }
    },
    "runtime": {
      "description": "Configuration for Lua runtime.",
      "$ref": "#/$defs/EmmyrcRuntime",
      "default": {
        "classDefaultCall": {
          "forceNonColon": false,
          "forceReturnSelf": false,
          "functionName": ""
        },
        "extensions": [],
        "frameworkVersions": [],
        "nonstandardSymbol": [],
        "requireLikeFunction": [],
        "requirePattern": [],
        "version": "LuaLatest"
      }
    },
    "semanticTokens": {
      "description": "Configuration for semantic token highlighting.",
      "$ref": "#/$defs/EmmyrcSemanticToken",
      "default": {
        "enable": true,
        "renderDocumentationMarkup": true
      }
    },
    "signature": {
      "description": "Configuration for function signature help.",
      "$ref": "#/$defs/EmmyrcSignature",
      "default": {
        "detailSignatureHelper": true
      }
    },
    "strict": {
      "description": "Configuration for strict type checks.",
      "$ref": "#/$defs/EmmyrcStrict",
      "default": {
        "arrayIndex": true,
        "docBaseConstMatchBaseType": true,
        "metaOverrideFileDefine": true,
        "requirePath": false,
        "typeCall": false
      }
    },
    "workspace": {
      "description": "Configuration for workspace management.",
      "$ref": "#/$defs/EmmyrcWorkspace",
      "default": {
        "enableReindex": false,
        "encoding": "utf-8",
        "ignoreDir": [],
        "ignoreGlobs": [],
        "library": [],
        "moduleMap": [],
        "preloadFileSize": 0,
        "reindexDuration": 5000,
        "workspaceRoots": []
      }
    }
  },
  "$defs": {
    "ClassDefaultCall": {
      "type": "object",
      "properties": {
        "forceNonColon": {
          "description": "Remove the `self` parameter from list of constructor parameters\nwhen inferring constructor signature using `functionName`.",
          "type": "boolean",
          "default": true
        },
        "forceReturnSelf": {
          "description": "Always use `self` as constructor's return type when inferring\nconstructor signature using `functionName`.",
          "type": "boolean",
          "default": true
        },
        "functionName": {
          "description": "Name of the method that's used to resolve class default `__call` operator.\n\nFor example, if `functionName` is `\"__init\"`, then EmmyLua will use parameters\nand return types of `__init` method as parameters and return types\nof class' `__call` operator:\n\n```lua\n--- @class Example\n--- @field __init fun(): Example\n\n-- Unless `Example` provides its own `@overload`,\n-- any call to `Example()` is treated as a call to `Example:__init()`:\nlocal example = Example()\n--    ^^^^^^^ type of `example` is inferred as `Example`.\n```",
          "type": "string",
          "default": ""
        }
      }
    },
    "DiagnosticCode": {
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "none"
          ]
        },
        {
          "description": "Syntax error",
          "type": "string",
          "const": "syntax-error"
        },
        {
          "description": "Doc syntax error",
          "type": "string",
          "const": "doc-syntax-error"
        },
        {
          "description": "Type not found",
          "type": "string",
          "const": "type-not-found"
        },
        {
          "description": "Missing return statement",
          "type": "string",
          "const": "missing-return"
        },
        {
          "description": "Param Type not match",
          "type": "string",
          "const": "param-type-not-match"
        },
        {
          "description": "Missing parameter",
          "type": "string",
          "const": "missing-parameter"
        },
        {
          "description": "Redundant parameter",
          "type": "string",
          "const": "redundant-parameter"
        },
        {
          "description": "Unreachable code",
          "type": "string",
          "const": "unreachable-code"
        },
        {
          "description": "Unused",
          "type": "string",
          "const": "unused"
        },
        {
          "description": "Undefined global",
          "type": "string",
          "const": "undefined-global"
        },
        {
          "description": "Deprecated",
          "type": "string",
          "const": "deprecated"
        },
        {
          "description": "Access invisible",
          "type": "string",
          "const": "access-invisible"
        },
        {
          "description": "Discard return value",
          "type": "string",
          "const": "discard-returns"
        },
        {
          "description": "Undefined field",
          "type": "string",
          "const": "undefined-field"
        },
        {
          "description": "Local const reassign",
          "type": "string",
          "const": "local-const-reassign"
        },
        {
          "description": "Iter variable reassign",
          "type": "string",
          "const": "iter-variable-reassign"
        },
        {
          "description": "Duplicate type",
          "type": "string",
          "const": "duplicate-type"
        },
        {
          "description": "Redefined local",
          "type": "string",
          "const": "redefined-local"
        },
        {
          "description": "Redefined label",
          "type": "string",
          "const": "redefined-label"
        },
        {
          "description": "Code style check",
          "type": "string",
          "const": "code-style-check"
        },
        {
          "description": "Need check nil",
          "type": "string",
          "const": "need-check-nil"
        },
        {
          "description": "Await in sync",
          "type": "string",
          "const": "await-in-sync"
        },
        {
          "description": "Doc tag usage error",
          "type": "string",
          "const": "annotation-usage-error"
        },
        {
          "description": "Return type mismatch",
          "type": "string",
          "const": "return-type-mismatch"
        },
        {
          "description": "Missing return value",
          "type": "string",
          "const": "missing-return-value"
        },
        {
          "description": "Redundant return value",
          "type": "string",
          "const": "redundant-return-value"
        },
        {
          "description": "Undefined Doc Param",
          "type": "string",
          "const": "undefined-doc-param"
        },
        {
          "description": "Duplicate doc field",
          "type": "string",
          "const": "duplicate-doc-field"
        },
        {
          "description": "Unknown doc annotation",
          "type": "string",
          "const": "unknown-doc-tag"
        },
        {
          "description": "Missing fields",
          "type": "string",
          "const": "missing-fields"
        },
        {
          "description": "Inject Field",
          "type": "string",
          "const": "inject-field"
        },
        {
          "description": "Circle Doc Class",
          "type": "string",
          "const": "circle-doc-class"
        },
        {
          "description": "Incomplete signature doc",
          "type": "string",
          "const": "incomplete-signature-doc"
        },
        {
          "description": "Missing global doc",
          "type": "string",
          "const": "missing-global-doc"
        },
        {
          "description": "Assign type mismatch",
          "type": "string",
          "const": "assign-type-mismatch"
        },
        {
          "description": "Duplicate require",
          "type": "string",
          "const": "duplicate-require"
        },
        {
          "description": "non-literal-expressions-in-assert",
          "type": "string",
          "const": "non-literal-expressions-in-assert"
        },
        {
          "description": "Unbalanced assignments",
          "type": "string",
          "const": "unbalanced-assignments"
        },
        {
          "description": "unnecessary-assert",
          "type": "string",
          "const": "unnecessary-assert"
        },
        {
          "description": "unnecessary-if",
          "type": "string",
          "const": "unnecessary-if"
        },
        {
          "description": "duplicate-set-field",
          "type": "string",
          "const": "duplicate-set-field"
        },
        {
          "description": "duplicate-index",
          "type": "string",
          "const": "duplicate-index"
        },
        {
          "description": "generic-constraint-mismatch",
          "type": "string",
          "const": "generic-constraint-mismatch"
        },
        {
          "description": "cast-type-mismatch",
          "type": "string",
          "const": "cast-type-mismatch"
        },
        {
          "description": "require-module-not-visible",
          "type": "string",
          "const": "require-module-not-visible"
        },
        {
          "description": "enum-value-mismatch",
          "type": "string",
          "const": "enum-value-mismatch"
        }
      ]
    },
    "DiagnosticSeveritySetting": {
      "oneOf": [
        {
          "description": "Represents an error diagnostic severity.",
          "type": "string",
          "const": "error"
        },
        {
          "description": "Represents a warning diagnostic severity.",
          "type": "string",
          "const": "warning"
        },
        {
          "description": "Represents an information diagnostic severity.",
          "type": "string",
          "const": "information"
        },
        {
          "description": "Represents a hint diagnostic severity.",
          "type": "string",
          "const": "hint"
        }
      ]
    },
    "DocSyntax": {
      "description": "Syntax for highlighting documentation.",
      "oneOf": [
        {
          "description": "Documentation is not highlighted.",
          "type": "string",
          "const": "none"
        },
        {
          "description": "Documentation is highlighted as plain [MarkDown].\n\n[MarkDown]: https://commonmark.org/",
          "type": "string",
          "const": "md"
        },
        {
          "description": "Documentation is highlighted as [MySt], a MarkDown plugin for [Sphinx].\n\nEnables Autocompletion and Go To Definition for sphinx cross-references.\n\n[MySt]: https://myst-parser.readthedocs.io/\n[Sphinx]: https://www.sphinx-doc.org/",
          "type": "string",
          "const": "myst"
        },
        {
          "description": "Documentation is highlighted as [ReStructured Text].\n\nEnables Autocompletion and Go To Definition for [sphinx] cross-references.\n\n[ReStructured Text]: https://www.sphinx-doc.org/en/master/usage/restructuredtext/basics.html\n[sphinx]: https://www.sphinx-doc.org/",
          "type": "string",
          "const": "rst"
        }
      ]
    },
    "EmmyrcCodeAction": {
      "type": "object",
      "properties": {
        "insertSpace": {
          "description": "Add space after `---` comments when inserting `@diagnostic disable-next-line`.",
          "type": "boolean",
          "default": false
        }
      }
    },
    "EmmyrcCodeLens": {
      "type": "object",
      "properties": {
        "enable": {
          "description": "Enable code lens.",
          "type": "boolean",
          "default": true,
          "x-vscode-setting": true
        }
      }
    },
    "EmmyrcCompletion": {
      "type": "object",
      "properties": {
        "autoRequire": {
          "description": "When enabled, selecting a completion suggestion from another\nmodule will add the appropriate require statement.",
          "type": "boolean",
          "default": true,
          "x-vscode-setting": true
        },
        "autoRequireFunction": {
          "description": "Name of the function that's inserted when auto-requiring modules.\n\nDefault is `\"require\"`, but can be customized to use any module loader function.",
          "type": "string",
          "default": "require"
        },
        "autoRequireNamingConvention": {
          "description": "The naming convention for auto-required filenames.\n\nControls how the imported module names are formatted in the `require` statement.",
          "$ref": "#/$defs/EmmyrcFilenameConvention",
          "default": "keep"
        },
        "autoRequireSeparator": {
          "description": "Defines the character used to separate path segments in require statements.\n\nDefault is `\".\"`, but can be changed to other separators like `\"/\"`.",
          "type": "string",
          "default": "."
        },
        "baseFunctionIncludesName": {
          "description": "Whether to include the name in the base function in postfix autocompletion.\n\nEffect: `function () end` -> `function name() end`.",
          "type": "boolean",
          "default": true,
          "x-vscode-setting": true
        },
        "callSnippet": {
          "description": "Whether to use call snippets in completions.\n\nWhen enabled, function completions will insert a snippet with placeholders\nfor function arguments, allowing for quick tabbing between parameters.",
          "type": "boolean",
          "default": false,
          "x-vscode-setting": true
        },
        "enable": {
          "description": "Enable autocompletion.",
          "type": "boolean",
          "default": true,
          "x-vscode-setting": true
        },
        "postfix": {
          "description": "Symbol that's used to trigger postfix autocompletion.",
          "type": "string",
          "default": "@",
          "x-vscode-setting": {
            "default": null,
            "enum": [
              null,
              "@",
              ".",
              ":"
            ],
            "enumItemLabels": [
              "Default"
            ],
            "markdownEnumDescriptions": [
              "%config.common.enum.default.description%"
            ],
            "type": [
              "string",
              "null"
            ]
          }
        }
      }
    },
    "EmmyrcDiagnostic": {
      "description": "Represents the diagnostic configuration for Emmyrc.",
      "type": "object",
      "properties": {
        "diagnosticInterval": {
          "description": "Delay between opening/changing a file and scanning it for errors, in milliseconds.",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0,
          "x-vscode-setting": true
        },
        "disable": {
          "description": "A list of suppressed diagnostics.",
          "type": "array",
          "default": [],
          "items": {
            "$ref": "#/$defs/DiagnosticCode"
          }
        },
        "enable": {
          "description": "A flag indicating whether diagnostics are enabled at all.",
          "type": "boolean",
          "default": true
        },
        "enables": {
          "description": "A list of diagnostic codes that are enabled, in addition to default ones.",
          "type": "array",
          "default": [],
          "items": {
            "$ref": "#/$defs/DiagnosticCode"
          }
        },
        "globals": {
          "description": "A list of global variables.\n\nVariables from this list are always treated as defined globals.",
          "type": "array",
          "default": [],
          "items": {
            "type": "string"
          }
        },
        "globalsRegex": {
          "description": "A list of regular expressions for global variables.\n\nVariables that match these regular expressions are always treated as defined globals.",
          "type": "array",
          "default": [],
          "items": {
            "type": "string"
          }
        },
        "severity": {
          "description": "A map of diagnostic codes to their severity settings.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/$defs/DiagnosticSeveritySetting"
          },
          "default": {}
        }
      }
    },
    "EmmyrcDoc": {
      "type": "object",
      "properties": {
        "knownTags": {
          "description": "List of known documentation tags.",
          "type": "array",
          "default": [],
          "items": {
            "type": "string"
          }
        },
        "privateName": {
          "description": "List of glob patterns that enable treating specific field names as private.\n\nFor example, `m_*` would make fields `Type.m_id` and `Type.m_type` private.",
          "type": "array",
          "default": [],
          "items": {
            "type": "string"
          }
        },
        "rstDefaultRole": {
          "description": "When `syntax` is `Myst` or `Rst`, specifies [default role] used\nwith RST processor.\n\n[default role]: https://www.sphinx-doc.org/en/master/usage/configuration.html#confval-default_role",
          "type": [
            "string",
            "null"
          ]
        },
        "rstPrimaryDomain": {
          "description": "When `syntax` is `Myst` or `Rst`, specifies [primary domain] used\nwith RST processor.\n\n[primary domain]: https://www.sphinx-doc.org/en/master/usage/configuration.html#confval-primary_domain",
          "type": [
            "string",
            "null"
          ]
        },
        "syntax": {
          "description": "Syntax for highlighting documentation.",
          "$ref": "#/$defs/DocSyntax",
          "default": "md"
        }
      }
    },
    "EmmyrcDocumentColor": {
      "type": "object",
      "properties": {
        "enable": {
          "description": "Enable parsing strings for color tags and showing a color picker next to them.",
          "type": "boolean",
          "default": true,
          "x-vscode-setting": true
        }
      }
    },
    "EmmyrcExternalTool": {
      "type": "object",
      "properties": {
        "args": {
          "description": "List of arguments to pass to the external tool.\n\nEach argument can contain the following patterns:\n\n- `${file}` expands to the file path that needs formatting;\n\n- `${indent_size}` expands to numeric value for indentation size;\n\n- `${use_tabs?<on_yes>:<on_no>}` expands to `<on_yes>` placeholder or\n  `<on_no>` placeholder depending on whether tabs are used\n  for indentation.\n\n  For example, `${use_tabs?--tabs}` will expand to `--tabs` if tabs\n  are required, or an empty string if tabs are not required.\n\n- `${insert_final_newline?<on_yes>:<on_no>}` expands to `<on_yes>`\n  placeholder or `<on_no>` placeholder depending on whether the tool\n  should insert final newline.\n\n- `${non_standard_symbol?<on_yes>:<on_no>}` expands to `<on_yes>`\n  placeholder or `<on_no>` placeholder depending on whether\n  non-standard symbols are enabled.",
          "type": "array",
          "default": [],
          "items": {
            "type": "string"
          }
        },
        "program": {
          "description": "The command to run the external tool.",
          "type": "string",
          "default": ""
        },
        "timeout": {
          "description": "Command timeout, in milliseconds.",
          "type": "integer",
          "format": "uint64",
          "default": 5000,
          "minimum": 0
        }
      }
    },
    "EmmyrcFilenameConvention": {
      "description": "The naming convention for auto-required filenames.\n\nControls how the imported module names are formatted in the `require` statement.",
      "oneOf": [
        {
          "description": "Keep the original filename without any transformation.\n\nExample: `\"my-module\"` remains `\"my-module\"`.",
          "type": "string",
          "const": "keep"
        },
        {
          "description": "Convert the filename to `snake_case`.\n\nExample: `\"MyModule\"` becomes `\"my_module\"`.",
          "type": "string",
          "const": "snake-case"
        },
        {
          "description": "Convert the filename to `PascalCase`.\n\nExample: `\"my_module\"` becomes `\"MyModule\"`.",
          "type": "string",
          "const": "pascal-case"
        },
        {
          "description": "Convert the filename to `camelCase`.\n\nExample: `\"my_module\"` becomes `\"myModule\"`.",
          "type": "string",
          "const": "camel-case"
        },
        {
          "description": "When returning a class definition, use the class name; otherwise keep the original name.\n\nThis is useful for modules that export a single class with a name that might differ from the filename.",
          "type": "string",
          "const": "keep-class"
        }
      ]
    },
    "EmmyrcHover": {
      "type": "object",
      "properties": {
        "enable": {
          "description": "Enable showing documentation on hover.",
          "type": "boolean",
          "default": true,
          "x-vscode-setting": true
        }
      }
    },
    "EmmyrcInlayHint": {
      "type": "object",
      "properties": {
        "enable": {
          "description": "Enable inlay hints.",
          "type": "boolean",
          "default": true,
          "x-vscode-setting": true
        },
        "enumParamHint": {
          "description": "Show name of enumerator when passing a literal value to a function\nthat expects an enum.\n\nExample:\n\n```lua\n--- @enum Level\nlocal Foo = {\n   Info = 1,\n   Error = 2,\n}\n\n--- @param l Level\nfunction print_level(l) end\n\nprint_level(1 --[[ Hint: Level.Info ]])\n```",
          "type": "boolean",
          "default": false,
          "x-vscode-setting": true
        },
        "indexHint": {
          "description": "Show named array indexes.\n\nExample:\n\n```lua\nlocal array = {\n   [1] = 1, -- [name]\n}\n\nprint(array[1] --[[ Hint: name ]])\n```",
          "type": "boolean",
          "default": true,
          "x-vscode-setting": true
        },
        "localHint": {
          "description": "Show types of local variables.",
          "type": "boolean",
          "default": true,
          "x-vscode-setting": true
        },
        "metaCallHint": {
          "description": "Show hint when calling an object results in a call to\nits meta table's `__call` function.",
          "type": "boolean",
          "default": true,
          "x-vscode-setting": true
        },
        "overrideHint": {
          "description": "Show methods that override functions from base class.",
          "type": "boolean",
          "default": true,
          "x-vscode-setting": true
        },
        "paramHint": {
          "description": "Show parameter names in function calls and parameter types in function definitions.",
          "type": "boolean",
          "default": true,
          "x-vscode-setting": true
        }
      }
    },
    "EmmyrcInlineValues": {
      "type": "object",
      "properties": {
        "enable": {
          "description": "Show inline values during debug.",
          "type": "boolean",
          "default": true,
          "x-vscode-setting": true
        }
      }
    },
    "EmmyrcLuaVersion": {
      "oneOf": [
        {
          "description": "Lua 5.1",
          "type": "string",
          "const": "Lua5.1"
        },
        {
          "description": "LuaJIT",
          "type": "string",
          "const": "LuaJIT"
        },
        {
          "description": "Lua 5.2",
          "type": "string",
          "const": "Lua5.2"
        },
        {
          "description": "Lua 5.3",
          "type": "string",
          "const": "Lua5.3"
        },
        {
          "description": "Lua 5.4",
          "type": "string",
          "const": "Lua5.4"
        },
        {
          "description": "Lua 5.5",
          "type": "string",
          "const": "Lua5.5"
        },
        {
          "description": "Lua Latest, currently set to `Lua5.4`.",
          "type": "string",
          "const": "LuaLatest"
        }
      ]
    },
    "EmmyrcNonStdSymbol": {
      "type": "string",
      "enum": [
        "//",
        "/**/",
        "`",
        "+=",
        "-=",
        "*=",
        "/=",
        "%=",
        "^=",
        "//=",
        "|=",
        "&=",
        "<<=",
        ">>=",
        "||",
        "&&",
        "!",
        "!=",
        "continue"
      ]
    },
    "EmmyrcReference": {
      "type": "object",
      "properties": {
        "enable": {
          "description": "Enable searching for symbol usages.",
          "type": "boolean",
          "default": true,
          "x-vscode-setting": true
        },
        "fuzzySearch": {
          "description": "Use fuzzy search when searching for symbol usages\nand normal search didn't find anything.",
          "type": "boolean",
          "default": true,
          "x-vscode-setting": true
        },
        "shortStringSearch": {
          "description": "Also search for usages in strings.",
          "type": "boolean",
          "default": false,
          "x-vscode-setting": true
        }
      }
    },
    "EmmyrcReformat": {
      "type": "object",
      "properties": {
        "externalTool": {
          "description": "Configuration for external formatting tool.",
          "anyOf": [
            {
              "$ref": "#/$defs/EmmyrcExternalTool"
            },
            {
              "type": "null"
            }
          ],
          "default": null
        },
        "useDiff": {
          "description": "Whether to use the diff algorithm for formatting.",
          "type": "boolean",
          "default": false
        }
      }
    },
    "EmmyrcResource": {
      "type": "object",
      "properties": {
        "paths": {
          "description": "List of resource directories used in a project. Files from these\ndirectories will be added to autocompletion when completing\nfile paths.\n\nThis list can contain anything, like directories with game assets,\ntemplate files, and so on. No special interpretation beyond\nautocompletion is given to these paths.",
          "type": "array",
          "default": [],
          "items": {
            "type": "string"
          }
        }
      }
    },
    "EmmyrcRuntime": {
      "type": "object",
      "properties": {
        "classDefaultCall": {
          "description": "Controls resolution of class constructors.",
          "$ref": "#/$defs/ClassDefaultCall",
          "default": {
            "forceNonColon": false,
            "forceReturnSelf": false,
            "functionName": ""
          }
        },
        "extensions": {
          "description": "Extensions of Lua files that need analysis.\n\nExample: `[\".lua\", \".lua.txt\"]`.",
          "type": "array",
          "default": [],
          "items": {
            "type": "string"
          }
        },
        "frameworkVersions": {
          "type": "array",
          "default": [],
          "items": {
            "type": "string"
          }
        },
        "nonstandardSymbol": {
          "description": "List of enabled non-standard symbols.",
          "type": "array",
          "default": [],
          "items": {
            "$ref": "#/$defs/EmmyrcNonStdSymbol"
          }
        },
        "requireLikeFunction": {
          "description": "Functions that are treated like `require`.",
          "type": "array",
          "default": [],
          "items": {
            "type": "string"
          }
        },
        "requirePattern": {
          "description": "Require pattern in the format of Lua's [`path`].\n\nExample: `[\"?.lua\", \"?/init.lua\"]`.\n\n[`path`]: https://www.lua.org/pil/8.1.html",
          "type": "array",
          "default": [],
          "items": {
            "type": "string"
          }
        },
        "version": {
          "description": "Lua version.",
          "$ref": "#/$defs/EmmyrcLuaVersion",
          "default": "LuaLatest"
        }
      }
    },
    "EmmyrcSemanticToken": {
      "type": "object",
      "properties": {
        "enable": {
          "description": "Enable semantic tokens.",
          "type": "boolean",
          "default": true,
          "x-vscode-setting": true
        },
        "renderDocumentationMarkup": {
          "description": "Render Markdown/RST in documentation. Set `doc.syntax` for this option to have effect.",
          "type": "boolean",
          "default": false,
          "x-vscode-setting": true
        }
      }
    },
    "EmmyrcSignature": {
      "type": "object",
      "properties": {
        "detailSignatureHelper": {
          "description": "Whether to enable signature help.",
          "type": "boolean",
          "default": true,
          "x-vscode-setting": true
        }
      }
    },
    "EmmyrcStrict": {
      "type": "object",
      "properties": {
        "arrayIndex": {
          "description": "Whether to enable strict mode when inferring type\nof array indexing operation.",
          "type": "boolean",
          "default": true
        },
        "docBaseConstMatchBaseType": {
          "description": "Base constant types defined in doc can match base types, allowing `int`\nto match `---@alias id 1|2|3`, same for string.",
          "type": "boolean",
          "default": false
        },
        "metaOverrideFileDefine": {
          "description": "Definitions from `@meta` files always overrides definitions\nfrom normal files.",
          "type": "boolean",
          "default": true
        },
        "requirePath": {
          "description": "Whether to enable strict mode for resolving require paths.",
          "type": "boolean",
          "default": false
        },
        "typeCall": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "EmmyrcWorkspace": {
      "type": "object",
      "properties": {
        "enableReindex": {
          "description": "Enable full project reindex after changing a file.",
          "type": "boolean",
          "default": false,
          "x-vscode-setting": true
        },
        "encoding": {
          "description": "File encoding.",
          "type": "string",
          "default": "utf-8"
        },
        "ignoreDir": {
          "description": "List of ignored directories.",
          "type": "array",
          "default": [],
          "items": {
            "type": "string"
          }
        },
        "ignoreGlobs": {
          "description": "List of globs for ignored files.",
          "type": "array",
          "default": [],
          "items": {
            "type": "string"
          }
        },
        "library": {
          "description": "List of library roots.\n\nExample: `\"/usr/local/share/lua/5.1\"`.",
          "type": "array",
          "default": [],
          "items": {
            "type": "string"
          }
        },
        "moduleMap": {
          "description": "Module map. Allows customizing conversion from file paths\nto module names and require paths.\n\nThis is a list of objects, each containing a regular expression\nand a replace string. When generating module name for a file,\nEmmyLua will reverse-match file path with require patterns,\ngenerate an appropriate module name, then run it through these replace\npatterns to get the final module name.\n\nExample:\n\n```json\n{\n    \"workspace\": {\n        \"moduleMap\": [\n            {\n                \"pattern\": \"^_core\\\\.public\\\\.(.*)$\",\n                \"replace\": \"@core.$1\"\n            }\n        ]\n    }\n}\n```",
          "type": "array",
          "default": [],
          "items": {
            "$ref": "#/$defs/EmmyrcWorkspaceModuleMap"
          }
        },
        "preloadFileSize": {
          "type": "integer",
          "format": "int32",
          "default": 0
        },
        "reindexDuration": {
          "description": "Delay between changing a file and full project reindex, in milliseconds.",
          "type": "integer",
          "format": "uint64",
          "default": 5000,
          "minimum": 0,
          "x-vscode-setting": true
        },
        "workspaceRoots": {
          "description": "List of workspace roots.\n\nExample: `[\"src\", \"test\"]`.",
          "type": "array",
          "default": [],
          "items": {
            "type": "string"
          }
        }
      }
    },
    "EmmyrcWorkspaceModuleMap": {
      "type": "object",
      "properties": {
        "pattern": {
          "description": "Regular expression that will be matched against the generated module\nname. See [regex] crate for details about syntax.\n\n[regex]: https://docs.rs/regex/latest/regex/#syntax",
          "type": "string"
        },
        "replace": {
          "description": "Replace string. Use `$name` to substitute capturing groups from regex.",
          "type": "string"
        }
      },
      "required": [
        "pattern",
        "replace"
      ]
    }
  }
}
